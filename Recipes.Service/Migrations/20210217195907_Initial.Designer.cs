// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Recipes.Service.Data.Contexts;

namespace Recipes.Service.Migrations
{
    [DbContext(typeof(RecipeContext))]
    [Migration("20210217195907_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WhyNotConfirmed")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommentText = "Tatlı çok güzel olmuş.",
                            CreateDate = new DateTime(2021, 2, 17, 22, 59, 6, 266, DateTimeKind.Local).AddTicks(3142),
                            EmailAddress = "cnrshn@gmail.com",
                            Fullname = "Caner Sahin",
                            IsConfirmed = true,
                            IsDeleted = false,
                            RecipeId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CommentText = "Güzel bir börek olmuş",
                            CreateDate = new DateTime(2021, 2, 17, 22, 59, 6, 266, DateTimeKind.Local).AddTicks(6137),
                            EmailAddress = "cnrshn@gmail.com",
                            Fullname = "Caner Sahin",
                            IsConfirmed = true,
                            IsDeleted = false,
                            RecipeId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CommentText = "Tatlıya bayıldım...",
                            CreateDate = new DateTime(2021, 2, 17, 22, 59, 6, 266, DateTimeKind.Local).AddTicks(6179),
                            EmailAddress = "cnrshn@gmail.com",
                            Fullname = "Caner Sahin",
                            IsConfirmed = true,
                            IsDeleted = false,
                            RecipeId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CommentText = "Tatlıya bayıldım...",
                            CreateDate = new DateTime(2021, 2, 17, 22, 59, 6, 266, DateTimeKind.Local).AddTicks(6183),
                            EmailAddress = "cnrshn@gmail.com",
                            Fullname = "Caner Sahin",
                            IsConfirmed = true,
                            IsDeleted = false,
                            RecipeId = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            CommentText = "Tatlıya bayıldım...",
                            CreateDate = new DateTime(2021, 2, 17, 22, 59, 6, 266, DateTimeKind.Local).AddTicks(6187),
                            EmailAddress = "cnrshn@gmail.com",
                            Fullname = "Caner Sahin",
                            IsConfirmed = true,
                            IsDeleted = false,
                            RecipeId = 5,
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            CommentText = "Tatlıya bayıldım...",
                            CreateDate = new DateTime(2021, 2, 17, 22, 59, 6, 266, DateTimeKind.Local).AddTicks(6191),
                            EmailAddress = "cnrshn@gmail.com",
                            Fullname = "Caner Sahin",
                            IsConfirmed = true,
                            IsDeleted = false,
                            RecipeId = 6,
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            CommentText = "Tatlıya bayıldım...",
                            CreateDate = new DateTime(2021, 2, 17, 22, 59, 6, 266, DateTimeKind.Local).AddTicks(6194),
                            EmailAddress = "cnrshn@gmail.com",
                            Fullname = "Caner Sahin",
                            IsConfirmed = true,
                            IsDeleted = false,
                            RecipeId = 7,
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            CommentText = "Tatlıya bayıldım...",
                            CreateDate = new DateTime(2021, 2, 17, 22, 59, 6, 266, DateTimeKind.Local).AddTicks(6198),
                            EmailAddress = "cnrshn@gmail.com",
                            Fullname = "Caner Sahin",
                            IsConfirmed = true,
                            IsDeleted = false,
                            RecipeId = 8,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.FoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CategoryPicture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WhyNotConfirmed")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FoodCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryDescription = "Tatlı Kategorisi",
                            CategoryName = "Tatlılar",
                            CategoryPicture = "default.jpg",
                            CreateDate = new DateTime(2021, 2, 17, 22, 59, 6, 248, DateTimeKind.Local).AddTicks(2926),
                            IsConfirmed = true,
                            IsDeleted = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryDescription = "Börek Kategorisi",
                            CategoryName = "Börekler",
                            CategoryPicture = "default.jpg",
                            CreateDate = new DateTime(2021, 2, 17, 22, 59, 6, 248, DateTimeKind.Local).AddTicks(5891),
                            IsConfirmed = true,
                            IsDeleted = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryDescription = "Çorba Kategorisi",
                            CategoryName = "Çorbalar",
                            CategoryPicture = "default.jpg",
                            CreateDate = new DateTime(2021, 2, 17, 22, 59, 6, 248, DateTimeKind.Local).AddTicks(5944),
                            IsConfirmed = true,
                            IsDeleted = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryDescription = "Kek Kategorisi",
                            CategoryName = "Kekler",
                            CategoryPicture = "default.jpg",
                            CreateDate = new DateTime(2021, 2, 17, 22, 59, 6, 248, DateTimeKind.Local).AddTicks(5950),
                            IsConfirmed = true,
                            IsDeleted = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryDescription = "Makarna Kategorisi",
                            CategoryName = "Makarnalar",
                            CategoryPicture = "default.jpg",
                            CreateDate = new DateTime(2021, 2, 17, 22, 59, 6, 248, DateTimeKind.Local).AddTicks(5955),
                            IsConfirmed = true,
                            IsDeleted = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryDescription = "Pasta Kategorisi",
                            CategoryName = "Pastalar",
                            CategoryPicture = "default.jpg",
                            CreateDate = new DateTime(2021, 2, 17, 22, 59, 6, 248, DateTimeKind.Local).AddTicks(5959),
                            IsConfirmed = true,
                            IsDeleted = false,
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            CategoryDescription = "Kahvaltı Kategorisi",
                            CategoryName = "Kahvaltılıklar",
                            CategoryPicture = "default.jpg",
                            CreateDate = new DateTime(2021, 2, 17, 22, 59, 6, 248, DateTimeKind.Local).AddTicks(5965),
                            IsConfirmed = true,
                            IsDeleted = false,
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            CategoryDescription = "Kurabiye Kategorisi",
                            CategoryName = "Kurabiyeler",
                            CategoryPicture = "default.jpg",
                            CreateDate = new DateTime(2021, 2, 17, 22, 59, 6, 248, DateTimeKind.Local).AddTicks(5971),
                            IsConfirmed = true,
                            IsDeleted = false,
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            CategoryDescription = "Salata Kategorisi",
                            CategoryName = "Salatalar",
                            CategoryPicture = "default.jpg",
                            CreateDate = new DateTime(2021, 2, 17, 22, 59, 6, 248, DateTimeKind.Local).AddTicks(5975),
                            IsConfirmed = true,
                            IsDeleted = false,
                            UserId = 2
                        },
                        new
                        {
                            Id = 10,
                            CategoryDescription = "Sulu Yemek Kategorisi",
                            CategoryName = "Sulu Yemekler",
                            CategoryPicture = "default.jpg",
                            CreateDate = new DateTime(2021, 2, 17, 22, 59, 6, 248, DateTimeKind.Local).AddTicks(5980),
                            IsConfirmed = true,
                            IsDeleted = false,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("CookingTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FoodCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FoodPicture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FoodTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PersonSize")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("PreparationTime")
                        .HasColumnType("time");

                    b.Property<string>("RecipeDetail")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoAuthor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<string>("SeoTags")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.Property<string>("WhyNotConfirmed")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("FoodCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommentCount = 0,
                            CookingTime = new TimeSpan(0, 0, 15, 0, 0),
                            CreateTime = new DateTime(2021, 2, 17, 22, 59, 6, 260, DateTimeKind.Local).AddTicks(4530),
                            FoodCategoryId = 1,
                            FoodName = "Kadayif Tatlısı",
                            FoodPicture = "default.jpg",
                            FoodTitle = "guzel tatli",
                            IsConfirmed = true,
                            IsDeleted = false,
                            Material = "kadayıf tarifi malzemeler listesi, html text editor ile yazılacak.",
                            PersonSize = 4,
                            PreparationTime = new TimeSpan(0, 0, 25, 0, 0),
                            RecipeDetail = "15 dk pişir, soğut, servis et vs.",
                            SeoAuthor = "Caner Sahin",
                            SeoDescription = "Kadayif tatlisi tarifi.",
                            SeoTags = "birinci, yemek, tarifi",
                            UserId = 1,
                            ViewCount = 400
                        },
                        new
                        {
                            Id = 2,
                            CommentCount = 0,
                            CookingTime = new TimeSpan(0, 0, 15, 0, 0),
                            CreateTime = new DateTime(2021, 2, 17, 22, 59, 6, 261, DateTimeKind.Local).AddTicks(1536),
                            FoodCategoryId = 2,
                            FoodName = "Avcı Böreği",
                            FoodPicture = "default.jpg",
                            FoodTitle = "Tatlı tarifinin kısa bir başlığı.",
                            IsConfirmed = true,
                            IsDeleted = false,
                            Material = "avcı böreği tarifi malzemeler listesi, html text editor ile yazılacak.",
                            PersonSize = 4,
                            PreparationTime = new TimeSpan(0, 0, 25, 0, 0),
                            RecipeDetail = "15 dk pişir, soğut, servis et vs.",
                            SeoAuthor = "Caner Sahin",
                            SeoDescription = "Avcı böreği tarifi.",
                            SeoTags = "börek, avcı, tarif",
                            UserId = 1,
                            ViewCount = 299
                        },
                        new
                        {
                            Id = 3,
                            CommentCount = 0,
                            CookingTime = new TimeSpan(0, 0, 15, 0, 0),
                            CreateTime = new DateTime(2021, 2, 17, 22, 59, 6, 261, DateTimeKind.Local).AddTicks(1626),
                            FoodCategoryId = 3,
                            FoodName = "Ispanak Yemeği",
                            FoodPicture = "default.jpg",
                            FoodTitle = "Tatlı tarifinin kısa bir başlığı.",
                            IsConfirmed = true,
                            IsDeleted = false,
                            Material = "avcı böreği tarifi malzemeler listesi, html text editor ile yazılacak.",
                            PersonSize = 4,
                            PreparationTime = new TimeSpan(0, 0, 25, 0, 0),
                            RecipeDetail = "15 dk pişir, soğut, servis et vs.",
                            SeoAuthor = "Caner Sahin",
                            SeoDescription = "Avcı böreği tarifi.",
                            SeoTags = "börek, avcı, tarif",
                            UserId = 2,
                            ViewCount = 299
                        },
                        new
                        {
                            Id = 4,
                            CommentCount = 0,
                            CookingTime = new TimeSpan(0, 0, 15, 0, 0),
                            CreateTime = new DateTime(2021, 2, 17, 22, 59, 6, 261, DateTimeKind.Local).AddTicks(1633),
                            FoodCategoryId = 4,
                            FoodName = "Domates Yemeği",
                            FoodPicture = "default.jpg",
                            FoodTitle = "Tatlı tarifinin kısa bir başlığı.",
                            IsConfirmed = true,
                            IsDeleted = false,
                            Material = "avcı böreği tarifi malzemeler listesi, html text editor ile yazılacak.",
                            PersonSize = 4,
                            PreparationTime = new TimeSpan(0, 0, 25, 0, 0),
                            RecipeDetail = "15 dk pişir, soğut, servis et vs.",
                            SeoAuthor = "Caner Sahin",
                            SeoDescription = "Avcı böreği tarifi.",
                            SeoTags = "börek, avcı, tarif",
                            UserId = 2,
                            ViewCount = 299
                        },
                        new
                        {
                            Id = 5,
                            CommentCount = 0,
                            CookingTime = new TimeSpan(0, 0, 15, 0, 0),
                            CreateTime = new DateTime(2021, 2, 17, 22, 59, 6, 261, DateTimeKind.Local).AddTicks(1640),
                            FoodCategoryId = 5,
                            FoodName = "Patates Yemeği",
                            FoodPicture = "default.jpg",
                            FoodTitle = "Tatlı tarifinin kısa bir başlığı.",
                            IsConfirmed = true,
                            IsDeleted = false,
                            Material = "avcı böreği tarifi malzemeler listesi, html text editor ile yazılacak.",
                            PersonSize = 4,
                            PreparationTime = new TimeSpan(0, 0, 25, 0, 0),
                            RecipeDetail = "15 dk pişir, soğut, servis et vs.",
                            SeoAuthor = "Caner Sahin",
                            SeoDescription = "Avcı böreği tarifi.",
                            SeoTags = "börek, avcı, tarif",
                            UserId = 1,
                            ViewCount = 299
                        },
                        new
                        {
                            Id = 6,
                            CommentCount = 0,
                            CookingTime = new TimeSpan(0, 0, 15, 0, 0),
                            CreateTime = new DateTime(2021, 2, 17, 22, 59, 6, 261, DateTimeKind.Local).AddTicks(1647),
                            FoodCategoryId = 6,
                            FoodName = "Soğan Yemeği",
                            FoodPicture = "default.jpg",
                            FoodTitle = "Tatlı tarifinin kısa bir başlığı.",
                            IsConfirmed = true,
                            IsDeleted = false,
                            Material = "avcı böreği tarifi malzemeler listesi, html text editor ile yazılacak.",
                            PersonSize = 4,
                            PreparationTime = new TimeSpan(0, 0, 25, 0, 0),
                            RecipeDetail = "15 dk pişir, soğut, servis et vs.",
                            SeoAuthor = "Caner Sahin",
                            SeoDescription = "Avcı böreği tarifi.",
                            SeoTags = "börek, avcı, tarif",
                            UserId = 1,
                            ViewCount = 299
                        },
                        new
                        {
                            Id = 7,
                            CommentCount = 0,
                            CookingTime = new TimeSpan(0, 0, 15, 0, 0),
                            CreateTime = new DateTime(2021, 2, 17, 22, 59, 6, 261, DateTimeKind.Local).AddTicks(1654),
                            FoodCategoryId = 7,
                            FoodName = "Böğürtlen Yemeği",
                            FoodPicture = "default.jpg",
                            FoodTitle = "Tatlı tarifinin kısa bir başlığı.",
                            IsConfirmed = true,
                            IsDeleted = false,
                            Material = "avcı böreği tarifi malzemeler listesi, html text editor ile yazılacak.",
                            PersonSize = 4,
                            PreparationTime = new TimeSpan(0, 0, 25, 0, 0),
                            RecipeDetail = "15 dk pişir, soğut, servis et vs.",
                            SeoAuthor = "Caner Sahin",
                            SeoDescription = "Avcı böreği tarifi.",
                            SeoTags = "börek, avcı, tarif",
                            UserId = 2,
                            ViewCount = 299
                        },
                        new
                        {
                            Id = 8,
                            CommentCount = 0,
                            CookingTime = new TimeSpan(0, 0, 15, 0, 0),
                            CreateTime = new DateTime(2021, 2, 17, 22, 59, 6, 261, DateTimeKind.Local).AddTicks(1661),
                            FoodCategoryId = 8,
                            FoodName = "Peynir Yemeği",
                            FoodPicture = "default.jpg",
                            FoodTitle = "Tatlı tarifinin kısa bir başlığı.",
                            IsConfirmed = true,
                            IsDeleted = false,
                            Material = "avcı böreği tarifi malzemeler listesi, html text editor ile yazılacak.",
                            PersonSize = 4,
                            PreparationTime = new TimeSpan(0, 0, 25, 0, 0),
                            RecipeDetail = "15 dk pişir, soğut, servis et vs.",
                            SeoAuthor = "Caner Sahin",
                            SeoDescription = "Avcı böreği tarifi.",
                            SeoTags = "börek, avcı, tarif",
                            UserId = 1,
                            ViewCount = 299
                        });
                });

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "9841f5cd-5fed-4fdf-b1a4-595d843b9946",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            RoleDescription = "Tüm yetkilere sahip kullanıcıdır."
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "b64572b7-d644-4bd7-a7dc-705c86ad3b1e",
                            Name = "Editor",
                            NormalizedName = "EDITOR",
                            RoleDescription = "Tarif ve kategori ekleyebilir fakat silemez, Kullanıcılar ve roller sayfalarını görüntüleyemez."
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "19d21d1d-6146-46c7-93a2-3904012acde9",
                            Name = "Member",
                            NormalizedName = "MEMBER",
                            RoleDescription = "Üye olan herkese atanır, tarif yazabilirler ve yorum bırakabilirler, admin veya editor tarafından onaylanması gerekir. Kullanıcılar, roller ve çöp kutusu sayfalarını görüntüleyemez."
                        });
                });

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fullname")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "1 id'li kullanıcı",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da3f7766-58ad-4cf4-b5ad-5fb2c9587425",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Caner Sahin",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEKnW1z4ZEpV6cYxZ+DDzdzvL2uyAaG04oC/ScdwY3bXAD1de3FHZOYW00pXzTzYCNw==",
                            PhoneNumber = "00905425612223",
                            PhoneNumberConfirmed = true,
                            Picture = "default.jpg",
                            SecurityStamp = "2ca1f5a7-2f68-4ece-ab28-615e42a1f568",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            About = "2 id'li kullanıcı",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "044d0348-64b6-464c-88e9-fe501b9e434d",
                            Email = "editor@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Caner Sahin",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EDITOR@GMAIL.COM",
                            NormalizedUserName = "EDITOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEOeq1ideNRnrA8ihZ1tVfSMeHb05s1UnxpO90yfvsk7/5Zgd0lXPnrKNzcNVUBBT5w==",
                            PhoneNumber = "00905425612223",
                            PhoneNumberConfirmed = true,
                            Picture = "default.jpg",
                            SecurityStamp = "b779571b-6bc5-476f-bdd3-ac87aee0f2bd",
                            TwoFactorEnabled = false,
                            UserName = "Editor"
                        });
                });

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.Comment", b =>
                {
                    b.HasOne("Recipes.Service.Core.Concrete.Entities.Recipe", "Recipe")
                        .WithMany("Comments")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Recipes.Service.Core.Concrete.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.FoodCategory", b =>
                {
                    b.HasOne("Recipes.Service.Core.Concrete.Entities.User", "User")
                        .WithMany("FoodCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.Recipe", b =>
                {
                    b.HasOne("Recipes.Service.Core.Concrete.Entities.FoodCategory", "FoodCategory")
                        .WithMany("Recipes")
                        .HasForeignKey("FoodCategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Recipes.Service.Core.Concrete.Entities.User", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("FoodCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.RoleClaim", b =>
                {
                    b.HasOne("Recipes.Service.Core.Concrete.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.UserClaim", b =>
                {
                    b.HasOne("Recipes.Service.Core.Concrete.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.UserLogin", b =>
                {
                    b.HasOne("Recipes.Service.Core.Concrete.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.UserRole", b =>
                {
                    b.HasOne("Recipes.Service.Core.Concrete.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recipes.Service.Core.Concrete.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.UserToken", b =>
                {
                    b.HasOne("Recipes.Service.Core.Concrete.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.FoodCategory", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.Recipe", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Recipes.Service.Core.Concrete.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FoodCategories");

                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
